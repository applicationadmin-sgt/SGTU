# üöÄ Scalable Live Classroom System - Production Docker Configuration

version: '3.8'

services:
  # üì° Mediasoup SFU Service (Scalable to multiple workers)
  mediasoup-service:
    build:
      context: .
      dockerfile: Dockerfile.mediasoup
    ports:
      - "3000:3000"
      - "10000-10100:10000-10100/udp"  # RTC ports range
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=liveclass_db
      - DB_USER=liveclass_user
      - DB_PASS=secure_password
      - MEDIASOUP_MIN_PORT=10000
      - MEDIASOUP_MAX_PORT=10100
      - MEDIASOUP_ANNOUNCED_IP=${EXTERNAL_IP}
    volumes:
      - ./backend:/app
      - mediasoup_logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - classroom_network
    deploy:
      replicas: 3  # Scale to 3 instances
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    restart: unless-stopped

  # üîÑ Redis Cluster for Socket.IO Scaling
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - classroom_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
    restart: unless-stopped

  # üóÑÔ∏è PostgreSQL for Scalable Data Storage
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=liveclass_db
      - POSTGRES_USER=liveclass_user
      - POSTGRES_PASSWORD=secure_password
      - POSTGRES_MAX_CONNECTIONS=500
      - POSTGRES_SHARED_BUFFERS=512MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=2GB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - classroom_network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    restart: unless-stopped

  # üåê Nginx Load Balancer & SSL Termination
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - mediasoup-service
      - frontend
    networks:
      - classroom_network
    restart: unless-stopped

  # ‚öõÔ∏è React Frontend (Production Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    ports:
      - "3002:80"
    environment:
      - REACT_APP_SOCKET_URL=https://${DOMAIN}
      - REACT_APP_API_URL=https://${DOMAIN}/api
      - REACT_APP_ENVIRONMENT=production
    volumes:
      - ./frontend/build:/usr/share/nginx/html:ro
    networks:
      - classroom_network
    restart: unless-stopped

  # üìä Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - classroom_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - classroom_network
    restart: unless-stopped

  # üé• Recording Service (Optional)
  recording-service:
    build:
      context: .
      dockerfile: Dockerfile.recording
    volumes:
      - recording_data:/app/recordings
      - ./backend/services:/app/services
    environment:
      - REDIS_URL=redis://redis:6379
      - STORAGE_PATH=/app/recordings
      - MAX_RECORDING_DURATION=7200  # 2 hours
    depends_on:
      - redis
      - mediasoup-service
    networks:
      - classroom_network
    restart: unless-stopped

  # üìà Analytics & Statistics Service
  analytics-service:
    build:
      context: .
      dockerfile: Dockerfile.analytics
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=liveclass_db
      - DB_USER=liveclass_user
      - DB_PASS=secure_password
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - classroom_network
    restart: unless-stopped

# üåê Networks
networks:
  classroom_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# üíæ Persistent Volumes
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  mediasoup_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  recording_data:
    driver: local

# üîß Configuration for different environments
# Use: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up